from utils import schedule, ensure_day, format_day, iso
from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, date, timedelta
import re
from aiogram import Router
from states import Booking
from api import ADMIN_IDS
from bd import get_connection
from datetime import datetime, time as dt_time
from aiogram import Router, types, Bot
from aiogram.utils.markdown import hlink
from aiogram.types import ReplyKeyboardRemove


user_router = Router()



SERVICES = {

    "–Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ": {
        "desc": "–≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è",

        "sub": {
            "—É–≥–æ–ª–∫–∏": {},
            "–∫–ª–∞—Å—Å–∏–∫–∞": {},
            "–ø–æ–ª—É—Ç–æ—Ä–Ω—ã–π –æ–±—ä–µ–º": {},
            "–¥–≤–æ–π–Ω–æ–π –æ–±—ä–µ–º": {},
            "–¥–≤–æ–π–Ω–æ–π —Å –ø–æ–ª–æ–≤–∏–Ω–æ–π –æ–±—ä–µ–º": {},
            "—Ç—Ä–æ–π–Ω–æ–π –æ–±—ä–µ–º": {},
            "—Ç–æ–ª—å–∫–æ —Å–Ω—è—Ç–∏–µ": {}

        },
        "trends": {
            "desc": "—Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–∞–≤—Ç–æ—Ä—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π)",

            "sub": {
                "–ê–Ω–∏–º–µ": {},
                "–¢—É—à—å": {},
                "–ü–æ–¥–≤–æ–¥–∫–∞": {},
                "–≠–∫—Å—Ç—Ä–∞ –ª–∏—Å–∞": {},
                "–†–∞–∑—Ä—è–∂–µ–Ω–Ω—ã–π": {},
                "–¶–≤–µ—Ç–æ–≤–æ–π –∫—Ä–µ–∞—Ç–∏–≤": {}
            },

        },
        "hard_trends": {
            "desc": "—Å–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã",

            "sub": {

                "4-5D": {},
                "Wispy": {},
                "–ê–º–µ—Ä–∏–∫–∞–Ω–∫–∞": {},
                "Medusa": {}
            },
        },
        "withdrawal_only": {
            "desc": "—Ç–æ–ª—å–∫–æ —Å–Ω—è—Ç–∏–µ"
        },

    },

    "–ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ": {
        "desc": "–ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, "
                "–±–æ—Ç–æ–∫—Å + –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –Ω–∏–∂–Ω–∏—Ö —Ä–µ—Å–Ω–∏—Ü –≤ –ø–æ–¥–∞—Ä–æ–∫",
        "price": 1600,
    },
    "–ü—Ä–∞–π—Å": {
        "desc": """üí∞ *–ü—Ä–∞–π—Å-–ª–∏—Å—Ç*

- –õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî *1600‚ÇΩ*
- –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ:
  ‚Ä¢ —É–≥–æ–ª–∫–∏ ‚Äî *1600‚ÇΩ*
  ‚Ä¢ –∫–ª–∞—Å—Å–∏–∫–∞ ‚Äî *1800‚ÇΩ*
  ‚Ä¢ –ø–æ–ª—É—Ç–æ—Ä–Ω—ã–π –æ–±—ä–µ–º ‚Äî *2000‚ÇΩ*
  ‚Ä¢ –¥–≤–æ–π–Ω–æ–π –æ–±—ä–µ–º ‚Äî *2000‚ÇΩ*
  ‚Ä¢ –¥–≤–æ–π–Ω–æ–π —Å –ø–æ–ª–æ–≤–∏–Ω–æ–π –æ–±—ä–µ–º ‚Äî *2300‚ÇΩ*
  ‚Ä¢ —Ç—Ä–æ–π–Ω–æ–π –æ–±—ä–µ–º ‚Äî *2300‚ÇΩ*
- ‚ú® –¢—Ä–µ–Ω–¥—ã: –ê–Ω–∏–º–µ, –¢—É—à—å, –ü–æ–¥–≤–æ–¥–∫–∞, –≠–∫—Å—Ç—Ä–∞ –ª–∏—Å–∞, –†–∞–∑—Ä—è–∂–µ–Ω–Ω—ã–π, –¶–≤–µ—Ç–Ω–æ–π –∫—Ä–µ–∞—Ç–∏–≤ ‚Äî *2500‚ÇΩ*
- üî• –°–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã: 4-5D, Wispy, –ê–º–µ—Ä–∏–∫–∞–Ω–∫–∞, Medusa ‚Äî *2800‚ÇΩ*
- ‚ùå –¢–æ–ª—å–∫–æ —Å–Ω—è—Ç–∏–µ ‚Äî *300‚ÇΩ*            
"""
    },

    "–ê–∫—Ü–∏–∏": {
        "desc": (
            "–ó–∞ —Ñ–æ—Ç–æ–æ—Ç–∑—ã–≤ —Å –æ—Ç–º–µ—Ç–∫–æ–π -300‚ÇΩ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–∑–∏—Ç"
        )
    },

    "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": {
        "desc": (
            "‚Ä¢  –ú–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
            "–ò–∑–≥–∏–±—ã –≤ –Ω–∞–ª–∏—á–∏–∏: J, B, C, C+, D, D+, L, M, L+, LB, LC\n"
            "–¢–æ–ª—â–∏–Ω—ã: 0.03, 0.07, 0.10, 0.12\n"
            "–¶–≤–µ—Ç–∞: —á–µ—Ä–Ω—ã–µ, —Ç–µ–º–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ, –∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ, —Å–≤–µ—Ç–ª–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ, "
            "–±–µ–ª—ã–µ, –∫—Ä–∞—Å–Ω—ã–µ, —Å–∏–Ω–∏–µ, –∑–µ–ª–µ–Ω—ã–µ, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ, —Ä–æ–∑–æ–≤—ã–µ, –∏–∑—É–º—Ä—É–¥–Ω—ã–µ, –æ—Ä–∞–Ω–∂–µ–≤—ã–µ, –∂–µ–ª—Ç—ã–µ"
        ),
    },

    "–°–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞": {

    }
}




EXTRA_SERVICES = {
    "–õ—É—á–∏": {"price": 200},
    "–°—Ç—Ä–µ–ª–∫–∞": {"price": 200},
    "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ —Ä–µ—Å–Ω–∏—á–∫–∏": {"price": 100},
    "–ò–∑–≥–∏–± (L+, LC, D+, LB)": {"price": 100},
    "–ë–ª–µ—Å—Ç–∫–∏": {"price": 100},
    "–°—Ç—Ä–∞–∑—ã": {"price": 200}
}



def valid_date(text: str) -> bool:
    return re.fullmatch(r"(?:[01]\d|2[0-3]):[0-5]\d", text) is not None



# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è telegram ID –∞–¥–º–∏–Ω–∞ ---
ADMIN_CONTACT_ID = 1111111111 #you ID 

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ /start ---
@user_router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()

    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏ –ø–æ —Ä–µ—Å–Ω–∏—Ü–∞–º.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–π—Å, –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω."
    )

    # –∫–Ω–æ–ø–∫–∞ ¬´üöÄ –ù–∞—á–∞—Ç—å¬ª
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="menu:start")]
        ]
    )

    await message.answer(text, reply_markup=kb)


# --- –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å¬ª ---
@user_router.callback_query(F.data == "menu:start")
async def show_main_menu(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É –ø–æ —Ä–µ—Å–Ω–∏—Ü–∞–º:",
        reply_markup=kd_services()
    )
    await state.set_state(Booking.service)


# --- –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º¬ª –≤ –º–µ–Ω—é —É—Å–ª—É–≥ ---
# --- –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É—Å–ª—É–≥ ---
def kd_services(n: int = 2) -> InlineKeyboardMarkup:
    # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —É—Å–ª—É–≥
    buttons = [
        InlineKeyboardButton(text=s.title(), callback_data=f"svc:{s}")
        for s in SERVICES
    ]

    # –¥–µ–ª–∏–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ n –∫–Ω–æ–ø–æ–∫
    rows = [buttons[i:i + n] for i in range(0, len(buttons), n)]

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    rows.append([InlineKeyboardButton(
        text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        callback_data="admin_contact"
    )])

    return InlineKeyboardMarkup(inline_keyboard=rows)


@user_router.callback_query(F.data == "admin_contact")
async def contact_admin(cb: types.CallbackQuery):
    await cb.answer()  # —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await cb.message.answer(
        f"–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É: tg://user?id={ADMIN_CONTACT_ID}"
    )


@user_router.callback_query(F.data == "materials")
async def show_materials(cb: types.CallbackQuery):
    await cb.answer()
    text = SERVICES['materials']['desc']
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_services")]
    ])
    await cb.message.edit_text(text, reply_markup=kb)


@user_router.callback_query(F.data == "services:back")
async def back_to_services(cb: types.CallbackQuery):
    await cb.answer()
    # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è kb_services(), –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É—Å–ª—É–≥
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb_services())

@user_router.callback_query(F.data.startswith("confirm:"), Booking.confirm)
async def confirm_handler(cb: types.CallbackQuery, state: FSMContext):
    parts = cb.data.split(":")
    if len(parts) < 4:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)
        return

    _, action, day_iso, *time_parts = parts
    time_str = ":".join(time_parts)  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "13:30"

    data = await state.get_data()
    service = data.get("service")
    sub_service = data.get("sub")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None

    if action == "yes":
        success = await confirm_booking(cb.from_user, day_iso, time_str, service, sub_service, cb.bot)

        if success:
            await cb.message.edit_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {format_day(day_iso)} –≤ {time_str}"
            )
            await state.clear()
        else:
            await cb.answer("–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç", show_alert=True)

    else:
        await cb.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()

@user_router.callback_query(F.data.startswith("day:"), Booking.day)
async def pick_day(cb: types.CallbackQuery, state: FSMContext):
    day_iso = cb.data.split(":", 1)[1]
    await state.update_data(day=day_iso)

    await cb.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å: {format_day(day_iso)}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=await kb_times(day_iso)
    )
    await state.set_state(Booking.time)

def kb_summary(service: str, sub: str, extras: list[str]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã?", callback_data="extra:menu")],
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="skip:extra")]
    ])



def kb_extras(options: list[str], chosen: list[str] = None) -> InlineKeyboardMarkup:
    chosen = chosen or []
    keyboard = []

    for extra in options:
        mark = "‚úÖ " if extra in chosen else ""
        keyboard.append([
            InlineKeyboardButton(
                text=f"{mark}{extra}",
                callback_data=f"extra:{extra}"
            )
        ])

    keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å", callback_data="extra:clear")
    ])
    keyboard.append([
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="extra:done")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏
@user_router.callback_query(F.data.startswith("time:"), Booking.time)
async def pick_time(cb: types.CallbackQuery, state: FSMContext):
    parts = cb.data.split(":")

    # –∂–¥–µ–º –º–∏–Ω–∏–º—É–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞: time, day_iso, time_str
    if len(parts) < 3:
        await cb.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)
        return

    _, day_iso, *time_parts = parts
    time_str = ":".join(time_parts)  # —Å–æ–±–µ—Ä—ë—Ç –æ–±—Ä–∞—Ç–Ω–æ 13:00, 10:30 –∏ —Ç.–¥.
    # –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏
    await state.update_data(time=time_str)

    await cb.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {format_day(day_iso)} –≤ {time_str}. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–ø–∏—Å—å?",
        reply_markup=kb_confirm(day_iso, time_str)
    )
    await state.set_state(Booking.confirm)




# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–Ω–∏)
async def kb_days_user(days_ahead: int = 30) -> InlineKeyboardMarkup:
    today = date.today()
    rows = []
    async with get_connection() as conn:
        rows_db = await conn.fetch("""
            SELECT date, COUNT(*) FILTER (WHERE status = 'free') AS free_count
            FROM slots
            WHERE date >= $1 AND date <= $2
            GROUP BY date
            HAVING COUNT(*) FILTER (WHERE status = 'free') > 0
            ORDER BY date
        """, today, today + timedelta(days=days_ahead))

    for r in rows_db:
        day_iso = r["date"].isoformat()
        rows.append([InlineKeyboardButton(
            text=f"{format_day(day_iso)} ({r['free_count']} —Å–≤–æ–±–æ–¥–Ω–æ)",
            callback_data=f"day:{day_iso}"
        )])

    if not rows:
        rows.append([InlineKeyboardButton(text="–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–Ω–µ–π", callback_data="noop")])

    rows.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back:services")])
    return InlineKeyboardMarkup(inline_keyboard=rows)
# –∫–Ω–æ–ø–∫–∞ "–°–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞"
@user_router.callback_query(F.data == "svc:–°–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞")
async def free_slots(cb: types.CallbackQuery, state: FSMContext):
    kb = await kb_days_user()
    await cb.message.edit_text("üìÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=kb)
###
@user_router.callback_query(F.data.startswith("sub:"), Booking.service)
async def pick_sub(cb: types.CallbackQuery, state: FSMContext):
    sub = cb.data.split(":", 1)[1]
    data = await state.get_data()
    service = data.get("service")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–¥—É—Å–ª—É–≥—É
    await state.update_data(sub=sub)

    # —Å–ø–∏—Å–æ–∫ –ø–æ–¥—É—Å–ª—É–≥ –±–µ–∑ –¥–æ–ø–æ–≤
    no_extras = [
        "—Ç–æ–ª—å–∫–æ —Å–Ω—è—Ç–∏–µ", "–ê–Ω–∏–º–µ", "–¢—É—à—å", "–ü–æ–¥–≤–æ–¥–∫–∞",
        "–≠–∫—Å—Ç—Ä–∞ –ª–∏—Å–∞", "–†–∞–∑—Ä—è–∂–µ–Ω–Ω—ã–π", "–¶–≤–µ—Ç–æ–≤–æ–π –∫—Ä–µ–∞—Ç–∏–≤",
        "4-5D", "Wispy", "–ê–º–µ—Ä–∏–∫–∞–Ω–∫–∞", "Medusa"
    ]

    if sub in no_extras:
        # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–æ–ø–æ–≤)
        await show_summary(cb, state)
    else:
        # –æ–±—ã—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±—Ä–∞—Ç—å –¥–æ–ø—ã
        await cb.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {service} ‚Üí {sub}",
            reply_markup=kb_summary(service, sub, data.get("extras", []))
        )




async def show_summary(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    service = data.get("service")
    sub = data.get("sub")
    extras = data.get("extras", [])

    price_map = {
        "—É–≥–æ–ª–∫–∏": 1600, "–∫–ª–∞—Å—Å–∏–∫–∞": 1800, "–ø–æ–ª—É—Ç–æ—Ä–Ω—ã–π –æ–±—ä–µ–º": 2000,
        "–¥–≤–æ–π–Ω–æ–π –æ–±—ä–µ–º": 2000, "–¥–≤–æ–π–Ω–æ–π —Å –ø–æ–ª–æ–≤–∏–Ω–æ–π –æ–±—ä–µ–º": 2300,
        "—Ç—Ä–æ–π–Ω–æ–π –æ–±—ä–µ–º": 2300, "–ê–Ω–∏–º–µ": 2500, "–¢—É—à—å": 2500, "–ü–æ–¥–≤–æ–¥–∫–∞": 2500,
        "–≠–∫—Å—Ç—Ä–∞ –ª–∏—Å–∞": 2500, "–†–∞–∑—Ä—è–∂–µ–Ω–Ω—ã–π": 2500, "–¶–≤–µ—Ç–æ–≤–æ–π –∫—Ä–µ–∞—Ç–∏–≤": 2500,
        "4-5D": 2800, "Wispy": 2800, "–ê–º–µ—Ä–∏–∫–∞–Ω–∫–∞": 2800, "Medusa": 2800,
        "—Ç–æ–ª—å–∫–æ —Å–Ω—è—Ç–∏–µ": 300, "–ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ": 1600
    }
    base_price = price_map.get(sub, 0)
    extras_price = sum(EXTRA_SERVICES.get(e, {}).get("price", 0) for e in extras)
    total = base_price + extras_price

    if extras_price == 0:
        price_text = f"üí∞ –¶–µ–Ω–∞: {base_price}‚ÇΩ"
    else:
        price_text = f"üí∞ –¶–µ–Ω–∞: {base_price} + {extras_price} = {total}‚ÇΩ"

    await cb.message.edit_text(
        f"‚ú® –ò—Ç–æ–≥:\n"
        f"–£—Å–ª—É–≥–∞: {service} ‚Üí {sub}\n"
        f"–î–æ–ø. —É—Å–ª—É–≥–∏: {', '.join(extras) if extras else '–Ω–µ—Ç'}\n"
        f"{price_text}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=await kb_days_user()
    )
    await state.set_state(Booking.day)



# –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –¥–æ–ø–æ–≤ (–Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∞ extra:menu)
@user_router.callback_query(F.data == "extra:menu", Booking.service)
async def open_extra_menu(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    extras = data.get("extras", [])
    all_options = list(EXTRA_SERVICES.keys())

    await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:",
        reply_markup=kb_extras(all_options, chosen=extras)
    )
    await state.set_state(Booking.extras)


# —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Booking.extras
@user_router.callback_query(F.data.startswith("extra:"), Booking.extras)
async def manage_extras(cb: types.CallbackQuery, state: FSMContext):
    action = cb.data.split(":", 1)[1]
    data = await state.get_data()
    extras = data.get("extras", []) or []
    all_options = list(EXTRA_SERVICES.keys())

    if action == "clear":
        extras = []
        await state.update_data(extras=extras)
        await cb.answer("–î–æ–ø—ã –æ—á–∏—â–µ–Ω—ã")
        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äî –≤–∏–¥–Ω–æ —á—Ç–æ –≤—Å—ë —Å–Ω—è—Ç–æ
        await cb.message.edit_reply_markup(reply_markup=kb_extras(all_options, chosen=extras))
        return

    if action == "done":
        await state.update_data(extras=extras)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–ø—ã
        await show_summary(cb, state)  # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥
        return

    # toggle –æ–¥–Ω–æ–≥–æ –¥–æ–ø–∞
    if action in all_options:
        if action in extras:
            extras.remove(action)
            await cb.answer(f"{action} —É–±—Ä–∞–Ω")
        else:
            extras.append(action)
            await cb.answer(f"{action} –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è", show_alert=True)

    await state.update_data(extras=extras)
    # –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É (—á—Ç–æ–±—ã –≤–∏–¥–Ω–æ –±—ã–ª–æ –≥–∞–ª–æ—á–∫–∏)
    await cb.message.edit_reply_markup(reply_markup=kb_extras(all_options, chosen=extras))

# –ø—Ä–æ–ø—É—Å–∫
@user_router.callback_query(F.data == "skip:extra", Booking.service)
async def skip_extra(cb: types.CallbackQuery, state: FSMContext):
    await show_summary(cb, state)


def format_client_info(user: types.User) -> str:
    # –∏–º—è
    name = user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    # —Å—Å—ã–ª–∫–∞
    if user.username:
        link = f"https://t.me/{user.username}"
    else:
        link = f"tg://user?id={user.id}"

    return f"{name}\n–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–≤—è–∑–∏: {link}"


async def confirm_booking(
    user: types.User,
    date_input,
    time_input,
    service: str,
    sub_service: str | None = None,
    bot: Bot | None = None
):
    if isinstance(date_input, str):
        date_obj = datetime.strptime(date_input, "%Y-%m-%d").date()
    else:
        date_obj = date_input

    if isinstance(time_input, str):
        time_obj = dt_time.fromisoformat(time_input)
    else:
        time_obj = time_input

    async with get_connection() as conn:
        async with conn.transaction():
            booking_id = await conn.fetchval("""
                INSERT INTO bookings (user_id, service, sub_service, date, time, created_at)
                VALUES ($1, $2, $3, $4, $5, NOW())
                RETURNING id
            """, user.id, service, sub_service, date_obj, time_obj)

            result = await conn.execute("""
                UPDATE slots
                SET status='booked', booking_id=$1
                WHERE date=$2 AND time=$3 AND booking_id IS NULL
            """, booking_id, date_obj, time_obj)

    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–∞—Å—å ‚Üí —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    if result.startswith("UPDATE") and "1" in result and bot:
        client_info = format_client_info(user)

        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üìå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n"
                    f"–î–∞—Ç–∞: {date_obj.strftime('%d.%m.%Y')}\n"
                    f"–í—Ä–µ–º—è: {time_obj.strftime('%H:%M')}\n"
                    f"–£—Å–ª—É–≥–∞: {service} {f'‚Üí {sub_service}' if sub_service else ''}\n"
                    f"{client_info}",
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    return result



async def kb_times(day_iso: str) -> InlineKeyboardMarkup:
    date_obj = datetime.strptime(day_iso, "%Y-%m-%d").date()
    async with get_connection() as conn:
        rows = await conn.fetch("""
            SELECT time
            FROM slots
            WHERE date = $1 AND status = 'free'
            ORDER BY time
        """, date_obj)

    if not rows:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç", callback_data="noop")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data="back_days")]
        ])

    buttons = [
        [InlineKeyboardButton(
            text=r["time"].strftime("%H:%M"),
            callback_data=f"time:{day_iso}:{r['time'].strftime('%H:%M')}"
        )]
        for r in rows
    ]
    buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data="back_days")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def kb_confirm(day_iso: str, time_str: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:yes:{day_iso}:{time_str}"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"confirm:no:{day_iso}:{time_str}")
        ]
    ])


# –∫–Ω–æ–ø–∫–∞ —Ç—Ä–µ–Ω–¥—ã
@user_router.callback_query(F.data.startswith("trends:"))
async def pick_trends(cb: types.CallbackQuery, state: FSMContext):
    service = cb.data.split(":", 1)[1]
    trends = SERVICES[service].get("trends", {}).get("sub", {})

    if not trends:
        await cb.answer("–¢—Ä–µ–Ω–¥–æ–≤ –Ω–µ—Ç", show_alert=True)
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=trend, callback_data=f"sub:{trend}")]
            for trend in trends
        ] + [
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"svc:{service}")]
        ]
    )

    await cb.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è {service}:",
        reply_markup=kb
    )


@user_router.callback_query(F.data == "back_days", Booking.time)
async def back_to_days(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=await kb_days_user())
    await state.set_state(Booking.day)


# –∫–Ω–æ–ø–∫–∞ —Å–ª–æ–∂–Ω—ã–µ_—Ç—Ä–µ–Ω–¥—ã
@user_router.callback_query(F.data.startswith("hard_trends:"))
async def pick_hard_trends(cb: types.CallbackQuery, state: FSMContext):
    service = cb.data.split(":", 1)[1]
    hard_trends = SERVICES[service].get("hard_trends", {}).get("sub", {})

    if not hard_trends:
        await cb.answer("–°–ª–æ–∂–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ—Ç", show_alert=True)
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=hard_trend, callback_data=f"sub:{hard_trend}")]
            for hard_trend in hard_trends
        ] + [
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"svc:{service}")]
        ]
    )

    await cb.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω—ã–π —Ç—Ä–µ–Ω–¥–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è {service}:",
        reply_markup=kb
    )

# –∫–Ω–æ–ø–∫–∞ –ø—Ä–∞–π—Å
@user_router.callback_query(F.data.startswith("price"))
async def pick_price(cb: types.CallbackQuery, state: FSMContext):
    service = cb.data.split(":", 1)[1]
    price = SERVICES[service].get("desc", None)

    if not price:
        await cb.answer("–ü—Ä–∞–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back:services")]
        ]
    )

    await cb.message.edit_text(
        f"–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —É—Å–ª—É–≥—É: {service}\n\n{price}",
        reply_markup=kb,
        parse_mode="Markdown"
    )


# –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@user_router.callback_query(F.data == "back:services")
async def back_to_services(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É –ø–æ —Ä–µ—Å–Ω–∏—Ü–∞–º",
        reply_markup=kd_services()
    )
    await state.set_state(Booking.service)
    await state.update_data(extras=[])



@user_router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É –ø–æ —Ä–µ—Å–Ω–∏—Ü–∞–º",
        reply_markup=kd_services(),
    )
    await state.set_state(Booking.service)



# –¥–æ–ø —É—Å–ª—É–≥–∏ –∫–Ω–æ–ø–∫–∏
@user_router.callback_query(F.data.startswith("svc"), Booking.service)
async def pick_service(cb: types.CallbackQuery, state: FSMContext):
    service = cb.data.split(":", 1)[1]
    await state.update_data(service=service)

    # üìå 1. –û—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ü—Ä–∞–π—Å
    if service == "–ü—Ä–∞–π—Å":
        await cb.message.edit_text(
            SERVICES[service]["desc"],
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:services")]
                ]
            ),
            parse_mode="Markdown"
        )
        return

    if service == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
        await cb.message.edit_text(
            SERVICES[service]["desc"],
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:services")]]
            )
        )
        return
    if service == "–ê–∫—Ü–∏–∏":
        await cb.message.edit_text(
            SERVICES[service]["desc"],
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:services")]]
            )
        )
        return


    # üìå 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—É
    subs = SERVICES[service].get("sub", [])
    price = SERVICES[service].get("price")

    # üìå 3. –ï—Å–ª–∏ —É —É—Å–ª—É–≥–∏ –µ—Å—Ç—å –ø–æ–¥—É—Å–ª—É–≥–∏ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
    if subs:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=sub, callback_data=f"sub:{sub}")]
                for sub in subs
            ] + [
                [InlineKeyboardButton(text="–¢—Ä–µ–Ω–¥–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã", callback_data=f"trends:{service}")],
                [InlineKeyboardButton(text="–°–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã", callback_data=f"hard_trends:{service}")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back:services")]
            ]
        )
        await cb.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {service}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=kb
        )

    # üìå 4. –ï—Å–ª–∏ –ø–æ–¥—É—Å–ª—É–≥ –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ) ‚Üí —Ü–µ–Ω–∞ + –≤—ã–±–æ—Ä –¥–∞—Ç—ã
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="pick_day_menu")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:services")]
            ]
        )
        await cb.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {service}.\n"
            f"{SERVICES[service]['desc']}\n"
            f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=kb
        )

@user_router.callback_query(F.data == "pick_day_menu", Booking.service)
async def show_days(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=await kb_days_user())
    await state.set_state(Booking.day)


